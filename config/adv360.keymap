
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
    // &dot_override,
    morph_dot: morph_dot {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_DOT";
        #binding-cells = <0>;
        bindings = <&kp PERIOD>, <&kp COLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    // &comma_override,
    morph_comma: morph_comma {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_COMMA";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp SEMICOLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    // &parens_left_override,
    morph_parens_left: morph_parens_left {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_PARENS_LEFT";
        #binding-cells = <0>;
        bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    // &parens_right_override,
    morph_parens_right: morph_parens_right {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_PARENS_RIGHT";
        #binding-cells = <0>;
        bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    // &exclamation_override,
    morph_exclamation: morph_exclamation {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_EXCLAMATION";
        #binding-cells = <0>;
        bindings = <&kp BACKSLASH>, <&kp EXCLAMATION>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    // &quote_single_override,
    morph_quote_single: morph_quote_single {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_QUOTE_SINGLE";
        #binding-cells = <0>;
        bindings = <&kp SINGLE_QUOTE>, <&kp GRAVE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    // &quote_double_override,
    morph_quote_double: morph_quote_double {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_QUOTE_DOUBLE";
        #binding-cells = <0>;
        bindings = <&kp DOUBLE_QUOTES>, <&kp TILDE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
   &kp LS(LG(S))       &morph_quote_single    &morph_quote_double   &kp MINUS   &kp EQUAL   &kp SLASH               &mo 8                                                                                                                          &mo 8       &morph_exclamation       &kp LBKT   &kp RBKT  &morph_parens_left  &morph_parens_right  &kp MINUS
   &kp LC(LA(DEL))     &kp V               &kp W               &kp D       &kp L       &kp MINUS                    &to 1                                                                                                                          &tog 7      &kp EQUAL           &kp U      &kp O     &kp Y                 &kp B                  &none
   &kp ESC             &kp N               &kp S               &kp T       &kp R       &morph_comma                    &to 0          &mo 6           &kp LEFT_WIN                                        &kp ESCAPE     &mo 6                        &tog 0      &morph_dot          &kp A      &kp E     &kp I                 &kp C                  &kp ENTER
   &none               &kp P               &kp F               &kp M       &kp H       &kp SINGLE_QUOTE             &none          &none           &kp LEFT_CONTROL            &none      &none        &kp TAB        &none            &none                   &kp DOUBLE_QUOTES   &kp K      &kp J     &kp X                 &kp G                  &none
   &none               &kp Z               &kp Q               &kp UP      &kp RIGHT                                &kp BSPC       &kp LEFT_SHIFT  &kp LEFT_ALT                                        &mo 7  &kp RIGHT_SHIFT  &kp SPACE                                   &kp LEFT   &kp DOWN  &kp UP                &kp RIGHT              &none
            >;
        };

        layer_qwerty {
            bindings = <
&trans   &trans    &trans   &trans   &trans     &trans &trans                                                            &trans &trans &trans &trans    &trans   &trans   &trans
&trans   &kp Q     &kp W    &kp E    &kp R      &kp T  &trans                                                            &trans &kp Y  &kp U  &kp I     &kp O    &kp P    &trans
&trans   &kp A     &kp S    &kp D    &kp F      &kp G  &trans          &trans  &trans             &trans &trans          &trans &kp H  &kp J  &kp K     &kp L    &kp SEMI &trans
&trans   &kp Z     &kp X    &kp C    &kp V      &kp B         &none    &none   &trans &none &none &trans &none  &none           &kp N  &kp M  &kp COMMA &kp DOT  &kp FSLH &trans
&trans   &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &trans   &trans  &trans             &trans &trans &trans                 &trans &trans    &trans   &trans   &trans
            >;
        };

    layer_padding1 {
      bindings = <
        &trans &trans &trans &trans &trans &trans  &trans                                                     &trans &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans  &trans                                                     &trans &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans  &trans       &trans &trans             &trans &trans       &trans &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans        &none  &none  &trans &none &none &trans &none  &none        &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans             &trans &trans &trans              &trans &trans &trans  &trans  &trans
      >;
    };

    layer_padding2 {
      bindings = <
        &trans &trans &trans &trans &trans &trans  &trans                                                     &trans &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans  &trans                                                     &trans &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans  &trans       &trans &trans             &trans &trans       &trans &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans        &none  &none  &trans &none &none &trans &none  &none        &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans             &trans &trans &trans              &trans &trans &trans  &trans  &trans
      >;
    };

     layer_padding3 {
      bindings = <
        &trans &trans &trans &trans &trans &trans  &trans                                                     &trans &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans  &trans                                                     &trans &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans  &trans       &trans &trans             &trans &trans       &trans &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans        &none  &none  &trans &none &none &trans &none  &none        &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans             &trans &trans &trans              &trans &trans &trans  &trans  &trans
      >;
    };

     layer_padding4 {
      bindings = <
        &trans &trans &trans &trans &trans &trans  &trans                                                     &trans &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans  &trans                                                     &trans &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans  &trans       &trans &trans             &trans &trans       &trans &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans        &none  &none  &trans &none &none &trans &none  &none        &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans             &trans &trans &trans              &trans &trans &trans  &trans  &trans
      >;
    };
        layer_keypad {
            bindings = <
&trans     &kp F5    &kp F6    &kp F7     &kp F8     &kp PERCENT        &trans                                                                                          &trans      &kp CARET            &macro_brackets  &macro_braces &macro_parens  &macro_angle_brackets   &trans
&trans     &kp F9    &kp F10   &kp F11    &kp F12    &kp DOLLAR         &trans                                                                                          &trans      &kp AMPERSAND        &kp N1     &kp N2        &kp N3        &trans            &trans
&trans     &kp F13   &kp F14   &kp F15    &kp F16    &kp POUND          &trans                 &trans     &trans                            &trans    &trans            &trans      &kp STAR             &kp N4     &kp N5        &kp N6        &kp DOT           &trans
&trans     &kp F17   &kp F18   &kp F19    &kp F20    &kp AT_SIGN                   &none       &none      &trans    &none        &none      &trans    &none     &none               &kp PIPE             &kp N7     &kp N8        &kp N9        &kp COMMA         &trans
&trans     &kp F21   &kp F22   &kp F23    &kp F24                                  &trans      &trans     &trans                            &trans    &trans    &trans                                   &trans     &kp N0        &trans        &trans            &trans
            >;
        };

        layer_fn {
            bindings = <
&trans   &kp F1  &kp F2  &kp RG(MINUS)   &kp RG(EQUAL)   &kp RG(SLASH)  &trans                                                            &trans &kp RG(BACKSLASH) &kp RG(LEFT_BRACKET) &kp RG(RIGHT_BRACKET)  &kp F3 &kp F4  &trans
&trans   &kp RG(Q)     &kp RG(W)    &kp RG(E)    &kp RG(R)      &kp RG(T)  &trans                                                            &trans &kp RG(Y)  &kp RG(U)  &kp RG(I)     &kp RG(O)    &kp RG(P)    &trans
&trans   &kp RG(A)     &kp RG(S)    &kp RG(D)    &kp RG(F)      &kp RG(G)  &trans          &trans  &trans             &trans &trans          &trans &kp RG(H)  &kp RG(J)  &kp RG(K)     &kp RG(L)    &none        &trans
&trans   &kp RG(Z)     &kp RG(X)    &kp RG(C)    &kp RG(V)      &kp RG(B)         &none    &none   &trans &none &none &trans &none  &none           &kp RG(N)  &kp RG(M)  &none         &none        &none        &trans
&trans   &none         &none        &none        &none          &trans     &trans &trans           &trans &trans &trans                 &trans &trans    &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
 &bootloader  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4                &trans  &trans          &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2          &bt BT_SEL 3  &bt BT_SEL 4  &bootloader
       &none         &none         &none         &none         &none            &none                &trans  &trans                 &none         &none            &none                 &none         &none        &none
 &bootloader         &none         &none         &none         &none            &none                &trans  &trans                 &none                                               &trans        &trans       &trans   &none       &none   &none   &none   &none  &bootloader
       &none         &none         &none         &none         &none            &none                 &none   &none  &rgb_ug RGB_MEFS_CMD         &none            &none  &rgb_ug RGB_MEFS_CMD         &none        &none   &none       &none   &none   &none   &none        &none
  &bt BT_CLR         &none         &none    &bl BL_INC    &bl BL_DEC  &rgb_ug RGB_TOG            &bl BL_TOG   &none                 &none    &bl BL_TOG  &rgb_ug RGB_TOG            &bl BL_INC    &bl BL_DEC        &none   &none  &bt BT_CLR
            >;
        };





    };
};
